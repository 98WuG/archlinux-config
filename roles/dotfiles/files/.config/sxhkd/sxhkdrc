#
# wm independent hotkeys
#

# terminal emulator
super + Return
	alacritty

# terminal emulator from same dir
ctrl + Return
	urxvtc -cd `xdotool getactivewindow getwindowname | cut -d ":" -f 2 | sed -e 's@~@'"$HOME"'@'`

# program launcher
super + space
	rofi -show run -eh 2 -opacity 85 -hide-scrollbar -separatorstyle none -lines 5 -width 50 -padding 25

# password manager
alt + space
	passmenu -i

# emojis
ctrl + space
	rofimoji

# screenshot
super + shift + s
	scrot 'img-%Y-%m-%d-%H%M%S.png' -e 'mv $f ~/Pictures/Screenshots'

# screenshot program (based off rofi)
super + x
	teiler
#	sleep 0.2; scrot -s &

# lockscreen
super + ctrl + a
	~/Scripts/lock

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd

# play/pause music
alt + p
	mpc -h entoma toggle
	#dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause

# volume down/up
XF86Audio{Lower,Raise}Volume
	~/Scripts/notifications/volume {down,up}

# volume mute
XF86AudioMute
	~/Scripts/notifications/volume mute

# prev/next song
alt + {comma,period}
	mpc -h entoma {prev,next}
	#dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.{Previous,Next}

# time/date and battery
super + d
	~/Scripts/notifications/status

# brightness
XF86MonBrightness{Up,Down}
	light -{A,U} 5 && ~/Scripts/notifications/brightness

# power menu
super + a
	~/Scripts/power

# active window
super + v
	flash_window && ~/Scripts/notifications/title
	#bspc config border_width 5; sleep 1; bspc config border_width 0

# next notification
ctrl + space
	twmnc --remote next

# clear all notifications
ctrl + shift
	twmnc --remote hide

# keyboard
#super + ctrl + k
#	tdrop -a -y 1100 -h 700 "onboard"

# compton
super + ctrl + c
	if pgrep "compton" > /dev/null; then pkill compton; else compton &; fi

# screenshot
super + q
	scrot 'img-%Y-%m-%d-%H%M%S.png' -e 'mv $f ~/Pictures/Screenshots'

# toggle touchscreen
super + alt + t
	~/Scripts/toggle Touchscreen

# toggle touchpad
super + alt + m
	~/Scripts/toggle Touchpad

# currently playing
super + n
	~/Scripts/notifications/desktop
#
# bspwm hotkeys
#

# quit bspwm normally
super + alt + Escape
	bspc quit

# toggle panel
super + e
	~/Scripts/paneltoggle

# close and kill
super + {_,shift + }w
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# if the current node is automatic, send it to the last manual, otherwise pull the last leaf
super + y
	bspc query -N -n focused.automatic && bspc node -n last.!automatic || bspc node last.leaf -n focused

# swap the current node and the biggest node
super + g
	bspc node -s biggest

# add desktop
super + alt + equal
	bspc monitor $(bspc query -M -m focused) -a $(expr $(bspc query -D -m focused | wc -l) + 1) && twmnc -c "Added desktop $(bspc query -D -m focused | wc -l)" --id 8

# remove desktop
super + alt + minus
	bspc desktop $(bspc query -D -m focused | wc -l) -r && twmnc -c "Removed desktop $(expr $(bspc query -D -m focused | wc -l) + 1)" --id 8


#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled && notify-send "Window State" "Tiled",pseudo_tiled && notify-send "Window State" "Pseudo Tiled",floating && notify-send "Window State" "Floating",fullscreen && notify-send "Window State" "Fullscreen"}

# set the node flags
super + ctrl + {x,y,z}
	bspc node -g {locked && notify-send "Node Flag" "Locked",sticky && notify-send "Node Flag" "Sticky",private && notify-send "Node Flag" "Private"}

# open floating urxvtc
super + shift + Return
	urxvtc -name floating

# open pseudo-tiled urxvtc
super + ctrl + Return
	urxvtc -name pseudo

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east} && ~/Scripts/notifications/title

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous node in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local && ~/Scripts/notifications/desktop

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# NOTE: This actually kills and restarts dunst every time to clear notifications
# Pls fix soon
# 12/26/2016
# FIXED :D
# 05/22/2017
# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}' && ~/Scripts/notifications/desktop

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-40 0,0 40,0 -40,40 0}

# reduce desktop padding
super + equal
	~/Scripts/paddown

# increase desktop padding
super + minus
	~/Scripts/padup

# decrease/increase window gap
super + {plus,underscore}
	bspc config -d focused window_gap $((`bspc config -d focused window_gap` {-,+} 5))
